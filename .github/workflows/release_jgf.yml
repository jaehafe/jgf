name: Release JGF

permissions: {}

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - npm/jgf/package.json

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/jgf@latest/package.json
          file-name: npm/jgf/package.json

      - name: Print version
        if: steps.version.outputs.changed == 'true'
        env:
          NEW_VERSION: ${{ steps.version.outputs.version }}
        run: |
          echo "Version change found! New version: ${NEW_VERSION}"

  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64

          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64

          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64-gnu

          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64-gnu

          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            code-target: linux-x64-musl

          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            code-target: linux-arm64-musl

          - os: macos-latest
            target: x86_64-apple-darwin
            code-target: darwin-x64

          - os: macos-latest
            target: aarch64-apple-darwin
            code-target: darwin-arm64

    name: Package ${{ matrix.code-target }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    env:
      JGF_VERSION: ${{ needs.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: release-${{ matrix.target }}

      - name: Add Rust Target
        run: rustup target add ${{ matrix.target }}

      - name: Build
        shell: bash
        run: |
          cross build --release --bin jgf --target=${{ matrix.target }}

      # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binaries
        if: runner.os == 'Windows'
        run: |
          JGF_BIN_NAME=jgf-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/jgf.exe $JGF_BIN_NAME.exe
          7z a $JGF_BIN_NAME.zip $JGF_BIN_NAME.exe

      # The binaries are zipped to fix permission loss https://github.com/actions/upload-artifact#permission-loss
      - name: Archive Binaries
        if: runner.os != 'Windows'
        run: |
          JGF_BIN_NAME=jgf-${{ matrix.code-target }}
          mv target/${{ matrix.target }}/release/jgf $JGF_BIN_NAME
          tar czf $JGF_BIN_NAME.tar.gz $JGF_BIN_NAME

      - name: Upload Binary
        uses: actions/upload-artifact@v4
        with:
          if-no-files-found: error
          name: binaries-${{ matrix.code-target }}
          path: |
            *.zip
            *.tar.gz

  publish:
    name: Publish
    needs: [check, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write # for creating GitHub release
      id-token: write # for npm provenance
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for changelog

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Unzip
        run: |
          find . -name "*.zip" -exec unzip -qq {} \;

      - name: Untar
        run: |
          find . -name "*.tar.gz" -exec tar xf {} \;

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Generate npm packages
        run: |
          node npm/jgf/scripts/generate-packages.mjs
          cat npm/jgf/package.json
          for package in npm/jgf*; do cat $package/package.json ; echo ; done

      - name: Publish npm packages as latest
        # NOTE: The trailing slash on $package/ changes it to publishing the directory
        run: |
          for package in npm/jgf*
          do
            npm publish $package/ --provenance --access public
            echo '----'
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          files: jgf-*
          name: jgf v${{ needs.check.outputs.version }}
          tag_name: v${{ needs.check.outputs.version }}
          fail_on_unmatched_files: true
          target_commitish: ${{ github.sha }}

      - name: Wait 3 minutes for smoke test
        run: sleep 180s

  smoke:
    needs: [check, publish]
    strategy:
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: ubuntu-latest
            container: node:18-alpine # musl
          - os: macos-latest
    name: Smoke Test ${{ matrix.os }} ${{ matrix.container }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    steps:
      - name: Test
        env:
          JGF_VERSION: ${{ needs.check.outputs.version}}
        run: |
          npx jgf@${JGF_VERSION} --version