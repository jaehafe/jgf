name: Release JGF Final

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - npm/jgf/package.json

jobs:
  check:
    name: Check version
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version.outputs.changed }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: version
        with:
          static-checking: localIsNew
          file-url: https://unpkg.com/jgf@latest/package.json
          file-name: npm/jgf/package.json

  # 검증된 도구 사용 - 각 플랫폼별로 별도 job
  build:
    needs: check
    if: needs.check.outputs.version_changed == 'true'
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64-gnu
          - target: aarch64-unknown-linux-gnu  
            os: ubuntu-latest
            name: linux-arm64-gnu
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64-musl
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest  
            name: linux-arm64-musl
          - target: x86_64-apple-darwin
            os: macos-latest
            name: darwin-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: darwin-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: win32-x64
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: win32-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Build binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: jgf
          target: ${{ matrix.target }}
          token: ${{ secrets.GITHUB_TOKEN }}
          archive: jgf-${{ matrix.name }}

  publish:
    name: Publish to npm
    needs: [check, build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Extract and create packages
        run: |
          ls -la
          
          # 아카이브들 확인
          for archive in jgf-*.tar.gz jgf-*.zip; do
            if [ -f "$archive" ]; then
              echo "Found: $archive"
              
              # 플랫폼명 추출 (jgf-linux-x64-gnu.tar.gz -> linux-x64-gnu)
              platform=$(echo "$archive" | sed 's/jgf-\(.*\)\.\(tar\.gz\|zip\)/\1/')
              echo "Platform: $platform"
              
              # 아카이브 압축 해제
              mkdir -p "temp-$platform"
              if [[ "$archive" == *.tar.gz ]]; then
                tar -xzf "$archive" -C "temp-$platform"
              else
                unzip -q "$archive" -d "temp-$platform"
              fi
              
              # 패키지 디렉토리 생성
              pkg_dir="npm/jgf-$platform"
              mkdir -p "$pkg_dir"
              
              # 바이너리 찾아서 복사
              if [ -f "temp-$platform/jgf" ]; then
                cp "temp-$platform/jgf" "$pkg_dir/"
                chmod +x "$pkg_dir/jgf"
              elif [ -f "temp-$platform/jgf.exe" ]; then
                cp "temp-$platform/jgf.exe" "$pkg_dir/"
              fi
              
              # OS, CPU 매핑
              case $platform in
                *linux*) os="linux" ;;
                *darwin*) os="darwin" ;;
                *win32*) os="win32" ;;
              esac
              
              case $platform in
                *x64*) cpu="x64" ;;
                *arm64*) cpu="arm64" ;;
              esac
              
              # package.json 생성
              cat > "$pkg_dir/package.json" << EOF
          {
            "name": "jgf-$platform",
            "version": "${{ needs.check.outputs.version }}",
            "author": "Lee Jaeha <wogkdkrm112@gmail.com>",
            "license": "MIT",
            "homepage": "https://github.com/jaehafe/jgf",
            "bugs": "https://github.com/jaehafe/jgf/issues",
            "repository": {
              "type": "git",
              "url": "git+https://github.com/jaehafe/jgf.git"
            },
            "os": ["$os"],
            "cpu": ["$cpu"]
          }
          EOF
              
              echo "Created package for $platform"
              rm -rf "temp-$platform"
            fi
          done

      - name: Generate main package
        run: |
          node npm/jgf/scripts/generate-packages.mjs
          echo "Updated main package.json:"
          cat npm/jgf/package.json

      - name: Publish all packages
        run: |
          # 플랫폼 패키지들 먼저 발행
          for package in npm/jgf-*; do
            if [ -d "$package" ] && [ "$package" != "npm/jgf" ]; then
              echo "Publishing $package..."
              npm publish "$package/" --access public
              echo "---"
            fi
          done
          
          # 메인 패키지 발행
          echo "Publishing main jgf package..."
          npm publish npm/jgf/ --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}